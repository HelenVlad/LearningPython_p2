from faker import Faker
from random import randint, uniform
from itertools import islice
import json
from conf import MODEL

fake = Faker("ru_RU")


def pk() -> int:
    '''
    Функция pk() является генератором, который генерирует уникальный целочисленный идентификатор при каждом вызове функции.
    Переменная pk_counter глобальная и используется для хранения счетчика, который увеличивается при каждом вызове функции.
    :return: Возвращает yield, которое представляет собой уникальный идентификатор в виде целого числа.
    '''
    global pk_counter
    while True:
        pk_counter += 1
        yield pk_counter


def title() -> str:
    '''
    Функция title() возвращает случайную строку из файла "book.txt".
    Сначала функция генерирует случайное число от 1 до 10, которое используется для выбора строки из файла.
    Функция открывает файл с помощью with open(filename), затем использует itertools.islice
    для выбора соответствующей строки и next() для выбора следующей строки.
    :return: Возвращает строку без символа перевода строки.
    '''
    filename = "book.txt"
    line_num = randint(1, 10)
    with open(filename) as file:
        lines = islice(file, line_num - 1, line_num)
        line = next(lines)
    return line.replace('\n', '')


def year() -> int:
    '''
    Функция year() возвращает случайный год от 1900 до 2023.
    Год генерируется с помощью функции randint(a, b).
    :return: Возвращает случайное целое число в диапазоне от a до b включительно.
    '''
    return randint(1900, 2023)


def pages() -> int:
    '''
    Функция pages() возвращает случайное количество страниц от 100 до 500.
    Количество страниц генерируется с помощью функции randint(a, b).
    :return: Возвращает случайное целое число в диапазоне от 100 до 500 включительно.
    '''
    return randint(100, 500)


def isbn13() -> str:
    '''
    Функция isbn13() возвращает случайный номер ISBN-13.
    Номер генерируется с помощью модуля Faker, который использует базу данных для генерации реалистичных данных.
    :return: Возвращает случайный номер ISBN-13.
    '''
    return fake.isbn13()


def rating() -> float:
    '''
    Функция rating() возвращает случайный рейтинг книги от 0 до 5.
    Рейтинг генерируется с помощью функции uniform(a, b), которая возвращает случайное число с плавающей запятой в диапазоне от a до b.
    :return: Возвращает случайное число с плавающей запятой в диапазоне от a до b.
    '''

    return round(uniform(0, 5), 2)


def price() -> float:
    '''
    Функция price() возвращает случайную цену книги от 1 до 2000.
    Цена генерируется с помощью функции uniform(a, b)
    :return: Возвращает случайное число с плавающей запятой в диапазоне от 1 до 2000
    '''
    return round(uniform(1, 2000), 2)


def generate_fio(func):
    '''
    Функция generate_fio() является декоратором с аргументом func, который принимает другую функцию (в данном случае это функция author()).
    Декоратор генерирует случайные фамилию, имя и отчество автора книги и возвращает их в виде списка строк.
    В данном случае список содержит от одного до трех элементов.
    :param func: Принимает другую функцию (в данном случае это функция author()).
    :return: Возвращает случайные фамилию, имя и отчество автора книги в виде списка строк.
    '''

    def wrapper():
        lst = []
        for i in range(randint(1, 3)):
            lst.append(func())
        # lst = ', '.join(lst)
        return lst

    return wrapper


@generate_fio
def author() -> str:
    '''
    Функция author() генерирует три случайных имени - имя, фамилию и отчество - с помощью библиотеки Faker.
    Затем функция объединяет первую букву имени, фамилию и отчество в строку short_fio.
    Функция возвращает эту строку в виде списка с одним элементом. Не принимает аргументов.

    :return: Функция author() возвращает список, содержащий единственный элемент -
    строку, содержащую сокращенное ФИО (фамилия и имя, сокращенное до первой буквы, и отчество, сокращенное до первой буквы).
    '''
    first_name = fake.first_name()
    last_name = fake.last_name()
    patronymic = fake.first_name()
    short_fio = f"{last_name} {first_name[0]}. {patronymic[0]}."
    return short_fio


def dictionary(model: str = MODEL) -> dict:
    '''
    Функция dictionary() возвращает словарь со случайно сгенерированными значениями для зафиксированных полей.
    Функция использует набор вспомогательных функций, таких как pk(), title(), year(), pages(), isbn13(), rating(),
    price() и author() для генерации разных полей в словаре.
    :param model: (необязательный): строка, представляющая модель, для которой создается запись книги.
    По умолчанию используется значение MODEL, которое было задано в начале программы.
    :return: Возвращает сгенерированный словарь.
    '''
    dictt = {
        "model": model,
        "pk": next(pk()),
        "fields": {
            "title": title(),
            "year": year(),
            "pages": pages(),
            "isbn13": isbn13(),
            "rating": rating(),
            "price": price(),
            "author": author()
        }
    }
    return dictt


def main(counter: int) -> None:
    '''
    Функция main() генерирует 100 записей книг, используя функцию dictionary(), которая создает одну запись книги.
    Записи книг сохраняются в виде списка словарей, который затем преобразуется в формат JSON и сохраняется в файл "document.json".
    :param counter: Целое число, являющееся начальным значением для генератора pk(), используемого в функции dictionary().
    :return: Функция ничего не возвращает, но создает файл "document.json", содержащий 100 записей книг в формате JSON.
    '''
    global pk_counter
    pk_counter = counter
    lst = []
    for i in range(1, 101):
        lst.append(dictionary())
    with open("document.json", "w") as f:
        json.dump(lst, f, ensure_ascii=False, indent=4)


if __name__ == "__main__":
    main(0)
